name: Deploy React Frontend to EC2 (DEV)

on:
  push:
    branches: [ develop ]

jobs:
  "Deploy-DEV":
    runs-on: ubuntu-latest

    env:
      COMMIT_HASH: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Decrypt env file
        run: |
          openssl enc -aes-256-cbc -d -pbkdf2 -in cicd-variables.sh.enc -out cicd-variables.sh -k "${{ secrets.DEV_CICD_VARIABLES_ENC_PW }}"
          chmod +x cicd-variables.sh

      - name: Load selected env variables into GitHub Environment
        run: |
          source ./cicd-variables.sh

          echo "::add-mask::$SSH_KEY"
          echo "::add-mask::$SSH_KEY_BASE64"
          echo "::add-mask::$AWS_SERVER_IP"
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo "::add-mask::$S3_BUCKET_INFRA"
          echo "::add-mask::$VITE_KAKAOMAP_KEY"
          echo "::add-mask::$VITE_API_URL"

          echo "SSH_KEY=$SSH_KEY" >> $GITHUB_ENV
          echo "SSH_KEY_BASE64=$SSH_KEY_BASE64" >> $GITHUB_ENV
          echo "AWS_SERVER_IP=$AWS_SERVER_IP" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION" >> $GITHUB_ENV
          echo "S3_BUCKET_INFRA=$S3_BUCKET_INFRA" >> $GITHUB_ENV
          echo "VITE_KAKAOMAP_KEY=${VITE_KAKAOMAP_KEY}" >> $GITHUB_ENV
          echo "VITE_API_URL=${VITE_API_URL}" >> $GITHUB_ENV

      - name: Restore SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY_BASE64}" | base64 --decode > "${SSH_KEY}"
          chmod 600 "${SSH_KEY}"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.7.1 --activate

      - name: Install dependencies
        run: pnpm install

      - name: Create .env file
        run: |
          echo "VITE_KAKAOMAP_KEY=${VITE_KAKAOMAP_KEY}" > .env
          echo "VITE_API_URL=${VITE_API_URL}" >> .env

      - name: Build React App
        run: pnpm build

      - name: Copy .env to dist folder
        run: cp .env dist/

      - name: Set timestamp-based path (Asia/Seoul)
        run: |
          TIMESTAMP=$(TZ='Asia/Seoul' date +%Y-%m-%d_%H_%M_%S)
          echo "DEPLOY_PATH=${TIMESTAMP}_${COMMIT_HASH}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Upload build to S3
        run: |
          aws s3 cp ./dist "${S3_BUCKET_INFRA}/fe/${DEPLOY_PATH}/" --recursive

      - name: Deploy to EC2
        run: |
          ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${AWS_SERVER_IP}" <<EOF
            set -e

            sudo rm -rf /var/www/html/*
            aws s3 cp "${S3_BUCKET_INFRA}/fe/${DEPLOY_PATH}/" /var/www/html/ --recursive
          EOF
            || echo "EC2 서버가 꺼져 있음." > failure_reason.txt
      - name: Health check and rollback if needed
        run: |
          set -e
          for i in $(seq 1 5); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://dev.careerbee.co.kr/health-check")
            if [ "\$STATUS" == "200" ]; then
              break
            fi
          done

          if [ "\$STATUS" != "200" ]; then
            echo "헬스 체크 실패. 상태 코드: $STATUS" > failure_reason.txt
            
            LATEST_VALID_BACKUP=$(aws s3 ls "${S3_BUCKET_INFRA}/fe/" | awk '{print $2}' | grep -v "^${DEPLOY_PATH}/$" | sort | tail -n 1 | sed 's#/$##')
            if [ -z "$LATEST_VALID_BACKUP" ]; then
              exit 1
            fi

            ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no "ubuntu@${AWS_SERVER_IP}" <<EOF
              set -e
              sudo rm -rf /var/www/html
              aws s3 cp "${S3_BUCKET_INFRA}/fe/${LATEST_VALID_BACKUP}/" /var/www/html/ --recursive
            EOF
            
            aws s3 rm "${S3_BUCKET_INFRA}/fe/${DEPLOY_PATH}/" --recursive

            exit 1
          fi

      - name: Notify Discord on Success
        if: success()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"
      
          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          [🔗 실행 로그 보기](${RUN_URL})"
      
          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "✅ 개발 환경에 프론트 배포 성공",
                  "description": $desc,
                  "color": 65280,
                  "footer": { "text": "GitHub Actions - DEV Deploy(FE)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json
      
          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          REPO="${{ github.repository }}"
          BRANCH="${{ github.ref_name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          TIMESTAMP="${{ github.event.head_commit.timestamp }}"
          
          if [ -f failure_reason.txt ]; then
            FAILURE_REASON=$(cat failure_reason.txt)
          else
            FAILURE_REASON="워크플로 로그를 확인해 주세요."
          fi

          DESCRIPTION="**Repository:** \`${REPO}\`
          **Branch:** \`${BRANCH}\`
          **Commit:** \`${COMMIT_MSG}\`
          **실패 사유:** \`${FAILURE_REASON}\`
          [🔗 실행 로그 보기](${RUN_URL})"
      
          jq -n \
            --arg desc "$DESCRIPTION" \
            --arg timestamp "$TIMESTAMP" \
            '{
              "embeds": [
                {
                  "title": "❌ 개발 환경에 프론트 배포 실패",
                  "description": $desc,
                  "color": 16711680,
                  "footer": { "text": "GitHub Actions - DEV Deploy(FE)" },
                  "timestamp": $timestamp
                }
              ]
            }' > payload.json
      
          curl -H "Content-Type: application/json" \
                -X POST \
                -d @payload.json \
                ${{ secrets.DISCORD_WEBHOOK_URL }}